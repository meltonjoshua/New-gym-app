version: '3.8'

# Production Docker Compose file using images from Docker Hub
# Use this file to deploy the application in production environments

services:
  api-gateway:
    image: ${DOCKER_HUB_USERNAME:-your-dockerhub-username}/fitai-pro-api-gateway:${VERSION:-latest}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://fitai:${DB_PASSWORD:-password}@database:5432/fitai
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
    depends_on:
      - database
      - redis
    networks:
      - fitai-network
    restart: unless-stopped

  user-service:
    image: ${DOCKER_HUB_USERNAME:-your-dockerhub-username}/fitai-pro-user-service:${VERSION:-latest}
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://fitai:${DB_PASSWORD:-password}@database:5432/fitai
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
    depends_on:
      - database
    networks:
      - fitai-network
    restart: unless-stopped

  workout-service:
    image: ${DOCKER_HUB_USERNAME:-your-dockerhub-username}/fitai-pro-workout-service:${VERSION:-latest}
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://fitai:${DB_PASSWORD:-password}@database:5432/fitai
      - MONGODB_URL=mongodb://mongo:27017/fitai
    depends_on:
      - database
      - mongo
    networks:
      - fitai-network
    restart: unless-stopped

  ai-service:
    image: ${DOCKER_HUB_USERNAME:-your-dockerhub-username}/fitai-pro-ai-service:${VERSION:-latest}
    ports:
      - "5000:5000"
    volumes:
      - ml_models:/app/models
    environment:
      - FLASK_ENV=production
      - MODEL_PATH=/app/models
      - DATABASE_URL=postgresql://fitai:${DB_PASSWORD:-password}@database:5432/fitai
      - REDIS_URL=redis://redis:6379
    depends_on:
      - database
      - redis
    networks:
      - fitai-network
    restart: unless-stopped

  analytics-service:
    image: ${DOCKER_HUB_USERNAME:-your-dockerhub-username}/fitai-pro-analytics-service:${VERSION:-latest}
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://fitai:${DB_PASSWORD:-password}@database:5432/fitai
      - REDIS_URL=redis://redis:6379
    depends_on:
      - database
      - redis
    networks:
      - fitai-network
    restart: unless-stopped

  notification-service:
    image: ${DOCKER_HUB_USERNAME:-your-dockerhub-username}/fitai-pro-notification-service:${VERSION:-latest}
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://fitai:${DB_PASSWORD:-password}@database:5432/fitai
      - REDIS_URL=redis://redis:6379
      - EMAIL_SERVICE=${EMAIL_SERVICE:-sendgrid}
      - EMAIL_API_KEY=${EMAIL_API_KEY}
    depends_on:
      - database
      - redis
    networks:
      - fitai-network
    restart: unless-stopped

  web-frontend:
    image: ${DOCKER_HUB_USERNAME:-your-dockerhub-username}/fitai-pro-web-frontend:${VERSION:-latest}
    ports:
      - "80:80"
    environment:
      - REACT_APP_API_URL=${API_URL:-http://localhost:3000}
    depends_on:
      - api-gateway
    networks:
      - fitai-network
    restart: unless-stopped

  # Database Services
  database:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=fitai
      - POSTGRES_USER=fitai
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - fitai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fitai"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo:
    image: mongo:5.0-focal
    environment:
      - MONGO_INITDB_DATABASE=fitai
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-password}
    volumes:
      - mongo_data:/data/db
    ports:
      - "${MONGO_PORT:-27017}:27017"
    networks:
      - fitai-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:6.2-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - fitai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web-frontend
      - api-gateway
    networks:
      - fitai-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
  ml_models:
    driver: local

networks:
  fitai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
